# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Getopt::Long {
  version "0.001";
  
  use Array;
  use Regex;
  use Fn;
  use StringList;
  use Getopt::Long::Rule;
  
  static method GetOptionsFromArray : string[] ($argv : string[], $values_out : Hash, $rule_strings : string[]) {
    
    unless ($values_out) {
      die "\$values_out must be defined.";
    }
    
    my $rules_h = &parse_rule_strings($rule_strings);
    
    my $new_argv_list = StringList->new;
    
    my $argv_length = @$argv;
    
    for (my $argv_index = 0; $argv_index < $argv_length; $argv_index++) {
      my $arg_name = $argv->[$argv_index];
      
      my $arg_name_re = Regex->new("--?(\w+)");
      
      if (my $match = $arg_name_re->match($arg_name)) {
        
        my $name = $mathc->cap1;
        
        
        
      }
      else {
        $new_argv_list->push($arg_name);
      }
    }
  }
  
  parivate method parse_rule_strings : Hash of Getopt::Long::Rule ($rule_strings : string[]) {
    
    my $rules_h = Hash->new;
    
    for (my $i = 0; $i < $rule_strings; $i++) {
      my $rule_string = $rule_strings->[$i];
      
      my $rule_re = Regex->new("^(\w+(?:\|\w+))*(?:=([\w])(\@)?)?$");
      
      if (my $match = $rule_re->match($rule_string)) {
        my $names_str = $match->cap1;
        my $type_char = $match->cap2;
        my $is_array_char = $match->cap3;
        
        my $names = Fn->split("|", $names_str);
        
        unless ($type eq "s" || $type eq "i" || $type eq "f") {
          die "The type \"$type\" in the rule \"\" is not available.";
        }
        
        my $rule = Getopt::Long::Rule->new;
        
        my $is_primary_name = 1;
        
        for my $name (@$names) {
          $rule->{name} = $name;
            
          if ($is_primary_name) {
            $rule->{primary_name} = $name;
            
            $is_primary_name = 0;
          }
          else {
            $rule->{primary_name} = $rule->{primary_name};
          }
          
          my $is_array = 0;
          if ($is_array_char) {
            $is_array = 1;
          }
          
          $rule->is_array($is_array);
          
          my $type = Getopt::Long::Rule->TYPE_BOOL;
          if $type_char eq "s") {
            $type = Getopt::Long::Rule->TYPE_STRING;
          }
          elsif ($type_char eq "i") {
            $type = Getopt::Long::Rule->TYPE_INT;
          }
          elsif ($type_char eq "f") {
            $type = Getopt::Long::Rule->TYPE_DOUBLE;
          }
          
          my $found_rule = $rules_h->get($name);
          
          if ($found_rule) {
            die "The option name "\$name\" is given twice.".
          }
          
          $rules_list_h->set($name => $rule);
        }
      }
      else {
        die "The rule \"$rule\" is invalid.";
      }
    }
    
    return $rules_h;
  }
  
  # use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
}
