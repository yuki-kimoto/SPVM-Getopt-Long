class TestCase::Getopt::Long {
  
  use Getopt::Long;
  use Hash;
  use Array;
  
  static method bool : int () {
    
    # Spec:opt,Args:--opt
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method bool_array : int () {
    
    # Spec:opt,Args:--opt --opt
    {
      my $args = ["cmd", "--opt", "--opt"];
      
      my $values_h = Hash->new({
        opt => new int[0],
      });
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type int[]) {
        return 0;
      }
      
      unless (Array->equals_int((int[])$value_opt, [1, 1])) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method int : int () {
    
    # Spec:opt=i,Args:--opt=2
    {
      my $args = ["cmd", "--opt=2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=i",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Int) {
        return 0;
      }
      unless ($value_opt->(int) == 2) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt=i,Args:--opt 2
    {
      my $args = ["cmd", "--opt", "2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=i",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Int) {
        return 0;
      }
      unless ($value_opt->(int) == 2) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method int_array : int () {
    
    # Spec:opt=i,Args:--opt=2 --opt 3
    {
      my $args = ["cmd", "--opt=2", "--opt", "3"];
      
      my $values_h = Hash->new({
        opt => new int[0],
      });
      
      my $spec_strings = [
        "opt=i",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type int[]) {
        return 0;
      }
      
      unless (Array->equals_int((int[])$value_opt, [2, 3])) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method double : double () {
    
    # Spec:opt=i,Args:--opt=2.5
    {
      my $args = ["cmd", "--opt=2.5"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=f",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Double) {
        return 0;
      }
      unless ($value_opt->(double) == 2.5) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt=i,Args:--opt 2
    {
      my $args = ["cmd", "--opt", "2.5"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=f",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Double) {
        return 0;
      }
      unless ($value_opt->(double) == 2.5) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method double_array : double () {
    
    # Spec:opt=i,Args:--opt=2.5 --opt 3.5
    {
      my $args = ["cmd", "--opt=2.5", "--opt", "3.5"];
      
      my $values_h = Hash->new({
        opt => new double[0],
      });
      
      my $spec_strings = [
        "opt=f",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type double[]) {
        return 0;
      }
      
      unless (Array->equals_double((double[])$value_opt, [2.5, 3.5])) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method string : int () {
    
    # Spec:opt=i,Args:--opt=2
    {
      my $args = ["cmd", "--opt=2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=s",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type string) {
        return 0;
      }
      unless ($value_opt->(string) eq "2") {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt=i,Args:--opt 2
    {
      my $args = ["cmd", "--opt", "2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=s",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type string) {
        return 0;
      }
      unless ($value_opt->(string) eq "2") {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method string_array : int () {
    
    # Spec:opt=i,Args:--opt=2 --opt 3
    {
      my $args = ["cmd", "--opt=2", "--opt", "3"];
      
      my $values_h = Hash->new({
        opt => new string[0],
      });
      
      my $spec_strings = [
        "opt=s",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type string[]) {
        return 0;
      }
      
      unless (Array->equals_string((string[])$value_opt, ["2", "3"])) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method multiple_names : int () {
    
    # Spec:opt,Args:--opt
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt,Args:-opt
    {
      my $args = ["cmd", "-opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt|o,Args:-opt
    {
      my $args = ["cmd", "-opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt|o,Args:--opt
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt|o",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt|o,Args:-o
    {
      my $args = ["cmd", "-o"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt|o",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt|o|p,Args:-p
    {
      my $args = ["cmd", "-p"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt|o|p",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      
      unless ($value_opt is_type Int) {
        return 0;
      }
      
      unless ($value_opt->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method option_value : int () {
    
    # Spec:opt=i,Args:--opt=2
    {
      my $args = ["cmd", "--opt=2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=i",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Int) {
        return 0;
      }
      unless ($value_opt->(int) == 2) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    # Spec:opt=i,Args:--opt 2
    {
      my $args = ["cmd", "--opt", "2"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=i",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type Int) {
        return 0;
      }
      unless ($value_opt->(int) == 2) {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method stop_parsing : int () {
    
    # Spec:opt=i,Args:--opt=2
    {
      my $args = ["cmd", "--opt=2", "--", "--opt3"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=s",
      ];
      
      my $args_ref = [$args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $args = $args_ref->[0];
      
      my $value_opt = $values_h->get("opt");
      unless ($value_opt is_type string) {
        return 0;
      }
      unless ($value_opt->(string) eq "2") {
        return 0;
      }
      unless (Array->equals_string($args, ["cmd", "--opt3"])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method extra : int () {
    
    {
      my $comand_args = ["foo", "--file=file2.dat", "--length=5", "--verbose", "--point=1.5", "--numbers=5", , "--numbers=6", "bar"];
      
      my $values_h = Hash->new({
        file => "file.dat",
        length => 24,
        verbose => 0,
        point => 0.5,
        numbers => new int[0],
      });
      
      my $spec_strings = [
        "file|f=s",
        "length|l=i",
        "verbose|v",
        "point|p=f",
        "numbers|n=i",
      ];
      
      my $args_ref = [$comand_args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $comand_args = $args_ref->[0];
      
      unless ($values_h->get("file")->(string) eq "file2.dat") {
        return 0;
      }
      
      unless ($values_h->get("length")->(int) == 5) {
        return 0;
      }
      
      unless ($values_h->get("verbose")->(int) == 1) {
        return 0;
      }
      
      unless ($values_h->get("point")->(double) == 1.5) {
        return 0;
      }
      
      unless (Array->equals_int($values_h->get("numbers")->(int[]), [5, 6])) {
        return 0;
      }
      
      unless (Array->equals_string($comand_args, ["foo", "bar"])) {
        return 0;
      }
    }
    
    {
      my $comand_args = ["foo", "-f", "file2.dat", "-l", "5", "-v", "-n", "5", "-n", "6", "bar"];
      
      my $values_h = Hash->new({
        file => "file.dat",
        length => 24,
        verbose => 0,
        numbers => new int[0],
      });
      
      my $spec_strings = [
        "file|f=s",
        "length|l=i",
        "verbose|v",
        "numbers|n=i",
      ];
      
      my $args_ref = [$comand_args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $comand_args = $args_ref->[0];
      
      unless ($values_h->get("file")->(string) eq "file2.dat") {
        return 0;
      }
      
      unless ($values_h->get("length")->(int) == 5) {
        return 0;
      }
      
      unless ($values_h->get("verbose")->(int) == 1) {
        return 0;
      }
      
      unless (Array->equals_int($values_h->get("numbers")->(int[]), [5, 6])) {
        return 0;
      }
      
      unless (Array->equals_string($comand_args, ["foo", "bar"])) {
        return 0;
      }
    }
    
    {
      my $comand_args = new string[0];
      
      my $values_h = Hash->new({
        file => "file.dat",
        length => 24,
        verbose => 0,
        point => 0.5,
        numbers => new int[0],
      });
      
      my $spec_strings = [
        "file|f=s",
        "length|l=i",
        "verbose|v",
        "point|p=f",
        "numbers|n=i",
      ];
      
      my $args_ref = [$comand_args];
      Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings);
      $comand_args = $args_ref->[0];
      
      unless ($values_h->get("file")->(string) eq "file.dat") {
        return 0;
      }
      
      unless ($values_h->get("length")->(int) == 24) {
        return 0;
      }
      
      unless ($values_h->get("verbose")->(int) == 0) {
        return 0;
      }
      
      unless ($values_h->get("point")->(double) == 0.5) {
        return 0;
      }
      
      unless (Array->equals_int($values_h->get("numbers")->(int[]), new int[0])) {
        return 0;
      }
      
      unless (Array->equals_string($comand_args, new string[0])) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method exceptions : int () {
    
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt_wrong",
      ];
      
      my $args_ref = [$args];
      eval { Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings); }
      
      unless (Fn->contains($@, "The option \"--opt\" is not available.")) {
        return 0;
      }
    }
    
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=p",
      ];
      
      my $args_ref = [$args];
      eval { Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings); }
      
      unless (Fn->contains($@, "The type \"p\" is not available.")) {
        return 0;
      }
    }
    
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt=i",
        "opt",
      ];
      
      my $args_ref = [$args];
      eval { Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings); }
      
      unless (Fn->contains($@, "The option name \"opt\" must be given once.")) {
        return 0;
      }
    }
    
    {
      my $args = ["cmd", "--opt"];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt?i",
      ];
      
      my $args_ref = [$args];
      eval { Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings); }
      
      unless (Fn->contains($@, "The option specification \"opt?i\" is invalid.")) {
        return 0;
      }
    }
    
    {
      my $args = ["cmd", undef];
      
      my $values_h = Hash->new;
      
      my $spec_strings = [
        "opt",
      ];
      
      my $args_ref = [$args];
      eval { Getopt::Long->GetOptionsFromArray($args_ref, $values_h, $spec_strings); }
      
      unless (Fn->contains($@, "The 2th argument must be defined.")) {
        return 0;
      }
    }
    
    $@ = undef;
    
    return 1;
  }
}
